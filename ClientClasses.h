#pragma once

#include <winsock2.h>
#include <ws2tcpip.h>
#include <string>
#include <set>
#include <vector>
#include <map>
#include <ctime>
using namespace std;
//!Класс для хранения сокета. Нужен для того, чтобы удобно передавать его в другую форму или класс.
class MyFormData {
public:
	SOCKET TheSock;
};
MyFormData d1;

/*! \brief Класс для хранения, генерации и отправки запросов серверу.
Содержит два поля: code и text. 
Нужен для того, чтобы посылка и получение запросов было однотипным, не зависимо от их содержания.
Потому что приложению-серверу не известно заранее, какого типа запрос он получит следующим.
*/
class MsgCl {
public:
	MsgCl() {
		code = -666;
		text = "-666";
	}
	MsgCl(int c, string t) {
		code = c;
		text = t;
	}
	/*!Поле code содержит код запроса.
	Код = -10   : Создать новый чат
	Код = -20   : Получить последние 40 сообщений в чате
	Код = -30   : Выход из чата
	Код = -40   : Выход из приложения
	Код = -100  : Отобразить список чатов
	Код = -1000 : Отобразить список пользователей
	Код > 0     : Отправка сообщения в определенный чат
	*/
	int code;
	/*!Поле text содержит текст запроса, если это необходимо. Иначе - пустую строку.
	При создании нового чата - список пользователей.
	При получении сообщений в чате или выходе из него - его код.
	При отправке ссообщения - текст сообщения.
	*/
	string text;
	//!Метод для объединения полей в одну строку для отправки их серверу
	string GenerateMsg() {
		string TheMsg = to_string(code) + "@" + text;
		return TheMsg;
	}
	//!Метод для отправки запроса серверу при помощи сокетов.
	void Send() {
		//проверка на пустоту полей
		if (code != -666 && text != "-666") {
			string msg = GenerateMsg();
			int sizeM = msg.size() + 1;			
			int Result = send(d1.TheSock, (char*)& sizeM, sizeof(int), 0);
			if (Result == SOCKET_ERROR) {

			}
			Result = send(d1.TheSock, msg.c_str(), sizeM, 0);
		}
	}
};

time_t seconds = time(NULL);
tm* timeinfo = localtime(&seconds);
MsgCl toSend;

//! Объект класса, использующийся для создания нового чата и получения ответа на него
MsgCl NewChat;
MsgCl GetChatsCl(-100, " ");
MsgCl GetMessagesCl(-20, " ");
MsgCl toExit(-40, " ");

//! Объект класса, использующийся для пересылки большинства запросов и получения ответов на них
MsgCl getCl;

MsgCl Test(0,"Все в порядке");

//! Вектор для хранения списка чатов
vector<string> ChatListVector;
//! Вектор для хранения списка пользователей
vector<string> userListVector;
/*! Вектор для хранения списка сообщений в чате.
Каждое сообщение состоит из ника отправителя, даты и времени отправки и самого текста сообщения
*/
vector<vector<string>> OldMessageVector;
//! Переменная для хранения количества новых сообщений чатах
map<int, int> Chats;
//! Переменная для запоминания старого количества новых сообщений чатах при обновлении списка
map<int, int> tempChats;
//! Вектор для хранения одного сообщения, состоящего из ника отправителя, даты и времени отправки и самого текста сообщения
vector<string> oneMessage;
//! Переменная, содержащая ник текущего пользователя
string ourUser;